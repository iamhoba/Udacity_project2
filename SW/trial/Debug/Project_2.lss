
Project_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000e72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a16  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b2  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000045f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f7b  00000000  00000000  00004e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005df9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 03 	call	0x70e	; 0x70e <main>
  8a:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
uint16_t overflowCounter = 0;
uint8_t mode = NORMAL_MODE;
uint8_t flag = LOW;

void App_init(void){
	LED_init(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  92:	67 e0       	ldi	r22, 0x07	; 7
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
	LED_init(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	83 e4       	ldi	r24, 0x43	; 67
  9e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
	if (LED_init(LED_1_PORT,LED_1_PIN) == ERROR)
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	21 f4       	brne	.+8      	; 0xb6 <App_init+0x24>
	{
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  ae:	67 e0       	ldi	r22, 0x07	; 7
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}				
	if (LED_init(LED_2_PORT,LED_2_PIN) == ERROR){
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	21 f4       	brne	.+8      	; 0xca <App_init+0x38>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  c2:	67 e0       	ldi	r22, 0x07	; 7
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_init(LED_3_PORT,LED_3_PIN) == ERROR){
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	21 f4       	brne	.+8      	; 0xde <App_init+0x4c>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  d6:	67 e0       	ldi	r22, 0x07	; 7
  d8:	84 e4       	ldi	r24, 0x44	; 68
  da:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_init(LED_4_PORT,LED_4_PIN) == ERROR){
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	21 f4       	brne	.+8      	; 0xf2 <App_init+0x60>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	84 e4       	ldi	r24, 0x44	; 68
  ee:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_init(LED_5_PORT,LED_5_PIN) == ERROR){
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	21 f4       	brne	.+8      	; 0x106 <App_init+0x74>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	84 e4       	ldi	r24, 0x44	; 68
 102:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_init(LED_6_PORT,LED_6_PIN) == ERROR){
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	82 e4       	ldi	r24, 0x42	; 66
 10a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LED_init>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	21 f4       	brne	.+8      	; 0x11a <App_init+0x88>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 112:	67 e0       	ldi	r22, 0x07	; 7
 114:	84 e4       	ldi	r24, 0x44	; 68
 116:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_TIMER_init() == ERROR){
 11a:	0e 94 34 03 	call	0x668	; 0x668 <LED_TIMER_init>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	21 f4       	brne	.+8      	; 0x12a <App_init+0x98>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 122:	67 e0       	ldi	r22, 0x07	; 7
 124:	84 e4       	ldi	r24, 0x44	; 68
 126:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN) == ERROR){
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <BUTTON_init>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	21 f4       	brne	.+8      	; 0x13e <App_init+0xac>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 136:	67 e0       	ldi	r22, 0x07	; 7
 138:	84 e4       	ldi	r24, 0x44	; 68
 13a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (BUTTON_INT_init(BUTTON_1_PORT,BUTTON_1_PIN) == ERROR){
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	0e 94 ef 02 	call	0x5de	; 0x5de <BUTTON_INT_init>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	21 f4       	brne	.+8      	; 0x152 <App_init+0xc0>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 14a:	67 e0       	ldi	r22, 0x07	; 7
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_TIMER_INT_init() == ERROR){
 152:	0e 94 81 03 	call	0x702	; 0x702 <LED_TIMER_INT_init>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	21 f4       	brne	.+8      	; 0x162 <App_init+0xd0>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 15a:	67 e0       	ldi	r22, 0x07	; 7
 15c:	84 e4       	ldi	r24, 0x44	; 68
 15e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
	if (LED_TIMER_start() == ERROR){
 162:	0e 94 39 03 	call	0x672	; 0x672 <LED_TIMER_start>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	21 f4       	brne	.+8      	; 0x172 <App_init+0xe0>
		LED_on(LED_INIT_ERROR_PORT, LED_INIT_ERROR_PIN);
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	84 e4       	ldi	r24, 0x44	; 68
 16e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 172:	08 95       	ret

00000174 <App_start>:
	}
}

void App_start(void){
	switch (mode)
 174:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mode>
 178:	88 23       	and	r24, r24
 17a:	21 f0       	breq	.+8      	; 0x184 <App_start+0x10>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	09 f4       	brne	.+2      	; 0x182 <App_start+0xe>
 180:	d1 c0       	rjmp	.+418    	; 0x324 <App_start+0x1b0>
 182:	08 95       	ret
	{
		case NORMAL_MODE:
		switch (led_number)
 184:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	09 f4       	brne	.+2      	; 0x18e <App_start+0x1a>
 18c:	46 c0       	rjmp	.+140    	; 0x21a <App_start+0xa6>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	09 f4       	brne	.+2      	; 0x194 <App_start+0x20>
 192:	89 c0       	rjmp	.+274    	; 0x2a6 <App_start+0x132>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <App_start+0x26>
 198:	67 c1       	rjmp	.+718    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{
			case 1:
			if (LED_off(LED_2_PORT,LED_2_PIN) == ERROR)
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	21 f4       	brne	.+8      	; 0x1ae <App_start+0x3a>
			{
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	83 e4       	ldi	r24, 0x43	; 67
 1aa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_3_PORT,LED_3_PIN) == ERROR){
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <App_start+0x4e>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	83 e4       	ldi	r24, 0x43	; 67
 1be:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_4_PORT,LED_4_PIN) == ERROR){
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	82 e4       	ldi	r24, 0x42	; 66
 1c6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <App_start+0x62>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	83 e4       	ldi	r24, 0x43	; 67
 1d2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_5_PORT,LED_5_PIN) == ERROR){
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	21 f4       	brne	.+8      	; 0x1ea <App_start+0x76>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	83 e4       	ldi	r24, 0x43	; 67
 1e6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_1_PORT,LED_1_PIN) == ERROR){
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	81 e4       	ldi	r24, 0x41	; 65
 1ee:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	21 f4       	brne	.+8      	; 0x1fe <App_start+0x8a>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	83 e4       	ldi	r24, 0x43	; 67
 1fa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_6_PORT,LED_6_PIN) == ERROR){
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	82 e4       	ldi	r24, 0x42	; 66
 202:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	21 f4       	brne	.+8      	; 0x212 <App_start+0x9e>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	83 e4       	ldi	r24, 0x43	; 67
 20e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			flag = HIGH;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 218:	08 95       	ret
			case 2:
			if (LED_off(LED_1_PORT,LED_1_PIN) == ERROR){
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	21 f4       	brne	.+8      	; 0x22e <App_start+0xba>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	83 e4       	ldi	r24, 0x43	; 67
 22a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_3_PORT,LED_3_PIN) == ERROR){
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	21 f4       	brne	.+8      	; 0x242 <App_start+0xce>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	83 e4       	ldi	r24, 0x43	; 67
 23e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_4_PORT,LED_4_PIN) == ERROR){
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	82 e4       	ldi	r24, 0x42	; 66
 246:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	21 f4       	brne	.+8      	; 0x256 <App_start+0xe2>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	83 e4       	ldi	r24, 0x43	; 67
 252:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_6_PORT,LED_6_PIN) == ERROR){
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	82 e4       	ldi	r24, 0x42	; 66
 25a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	21 f4       	brne	.+8      	; 0x26a <App_start+0xf6>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_toggle(LED_2_PORT,LED_2_PIN) == ERROR){
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	0e 94 01 03 	call	0x602	; 0x602 <LED_toggle>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	21 f4       	brne	.+8      	; 0x27e <App_start+0x10a>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	83 e4       	ldi	r24, 0x43	; 67
 27a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_toggle(LED_5_PORT,LED_5_PIN) == ERROR){
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	0e 94 01 03 	call	0x602	; 0x602 <LED_toggle>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	21 f4       	brne	.+8      	; 0x292 <App_start+0x11e>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	83 e4       	ldi	r24, 0x43	; 67
 28e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_TIMER_delay() == ERROR){
 292:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_TIMER_delay>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	09 f0       	breq	.+2      	; 0x29c <App_start+0x128>
 29a:	e6 c0       	rjmp	.+460    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	83 e4       	ldi	r24, 0x43	; 67
 2a0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 2a4:	08 95       	ret
			}
			break;
			case 3:
			if (LED_off(LED_1_PORT,LED_1_PIN) == ERROR){
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	21 f4       	brne	.+8      	; 0x2ba <App_start+0x146>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	83 e4       	ldi	r24, 0x43	; 67
 2b6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_2_PORT,LED_2_PIN) == ERROR){
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	21 f4       	brne	.+8      	; 0x2ce <App_start+0x15a>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_5_PORT,LED_5_PIN) == ERROR){
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <App_start+0x16e>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	83 e4       	ldi	r24, 0x43	; 67
 2de:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_6_PORT,LED_6_PIN) == ERROR){
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <App_start+0x182>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	83 e4       	ldi	r24, 0x43	; 67
 2f2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_3_PORT,LED_3_PIN) == ERROR){
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	21 f4       	brne	.+8      	; 0x30a <App_start+0x196>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	83 e4       	ldi	r24, 0x43	; 67
 306:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_4_PORT,LED_4_PIN) == ERROR){
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	82 e4       	ldi	r24, 0x42	; 66
 30e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	21 f4       	brne	.+8      	; 0x31e <App_start+0x1aa>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	83 e4       	ldi	r24, 0x43	; 67
 31a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			flag = LOW;
 31e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			break;
 322:	08 95       	ret
		}
		break;
		case PEDESTRIAN_MODE:
		switch (led_number)
 324:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	49 f0       	breq	.+18     	; 0x33e <App_start+0x1ca>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	09 f4       	brne	.+2      	; 0x332 <App_start+0x1be>
 330:	5d c0       	rjmp	.+186    	; 0x3ec <App_start+0x278>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	09 f0       	breq	.+2      	; 0x338 <App_start+0x1c4>
 336:	98 c0       	rjmp	.+304    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{
			case 1:
			mode = NORMAL_MODE;
 338:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <mode>
			break;
 33c:	08 95       	ret
			case 2:
			if (LED_off(LED_1_PORT,LED_1_PIN) == ERROR){
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	81 e4       	ldi	r24, 0x41	; 65
 342:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f4       	brne	.+8      	; 0x352 <App_start+0x1de>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	83 e4       	ldi	r24, 0x43	; 67
 34e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_3_PORT,LED_3_PIN) == ERROR){
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	21 f4       	brne	.+8      	; 0x366 <App_start+0x1f2>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	83 e4       	ldi	r24, 0x43	; 67
 362:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_6_PORT,LED_6_PIN) == ERROR){
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	82 e4       	ldi	r24, 0x42	; 66
 36a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	21 f4       	brne	.+8      	; 0x37a <App_start+0x206>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	83 e4       	ldi	r24, 0x43	; 67
 376:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_toggle(LED_2_PORT,LED_2_PIN) == ERROR){
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	0e 94 01 03 	call	0x602	; 0x602 <LED_toggle>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	21 f4       	brne	.+8      	; 0x38e <App_start+0x21a>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	83 e4       	ldi	r24, 0x43	; 67
 38a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_toggle(LED_5_PORT,LED_5_PIN) == ERROR){
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	82 e4       	ldi	r24, 0x42	; 66
 392:	0e 94 01 03 	call	0x602	; 0x602 <LED_toggle>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	21 f4       	brne	.+8      	; 0x3a2 <App_start+0x22e>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	83 e4       	ldi	r24, 0x43	; 67
 39e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (flag == LOW){
 3a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3a6:	81 11       	cpse	r24, r1
 3a8:	0b c0       	rjmp	.+22     	; 0x3c0 <App_start+0x24c>
				if (LED_on(LED_4_PORT,LED_4_PIN) == ERROR){
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	82 e4       	ldi	r24, 0x42	; 66
 3ae:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	89 f4       	brne	.+34     	; 0x3d8 <App_start+0x264>
					LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	83 e4       	ldi	r24, 0x43	; 67
 3ba:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <App_start+0x264>
				}
			}
			else if (flag == HIGH){
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <App_start+0x264>
				if (LED_off(LED_4_PORT,LED_4_PIN) == ERROR){
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	82 e4       	ldi	r24, 0x42	; 66
 3c8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <App_start+0x264>
					LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	83 e4       	ldi	r24, 0x43	; 67
 3d4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
				}
			}
			if (LED_TIMER_delay() == ERROR){
 3d8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LED_TIMER_delay>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	09 f0       	breq	.+2      	; 0x3e2 <App_start+0x26e>
 3e0:	43 c0       	rjmp	.+134    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	83 e4       	ldi	r24, 0x43	; 67
 3e6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 3ea:	08 95       	ret
			}
			break;
			case 3:
			if (LED_off(LED_1_PORT,LED_1_PIN) == ERROR){
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	83 e4       	ldi	r24, 0x43	; 67
 3fc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_2_PORT,LED_2_PIN) == ERROR){
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	81 e4       	ldi	r24, 0x41	; 65
 404:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	21 f4       	brne	.+8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	83 e4       	ldi	r24, 0x43	; 67
 410:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_5_PORT,LED_5_PIN) == ERROR){
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	82 e4       	ldi	r24, 0x42	; 66
 418:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	21 f4       	brne	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	83 e4       	ldi	r24, 0x43	; 67
 424:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_off(LED_6_PORT,LED_6_PIN) == ERROR){
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	82 e4       	ldi	r24, 0x42	; 66
 42c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	21 f4       	brne	.+8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	83 e4       	ldi	r24, 0x43	; 67
 438:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_3_PORT,LED_3_PIN) == ERROR){
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	81 e4       	ldi	r24, 0x41	; 65
 440:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	83 e4       	ldi	r24, 0x43	; 67
 44c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			if (LED_on(LED_4_PORT,LED_4_PIN) == ERROR){
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	82 e4       	ldi	r24, 0x42	; 66
 454:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	21 f4       	brne	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	83 e4       	ldi	r24, 0x43	; 67
 460:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			flag = LOW;
 464:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 468:	08 95       	ret

0000046a <__vector_1>:
}




ISR(EXT_INT_0){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	if (mode == NORMAL_MODE){
 48c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <mode>
 490:	81 11       	cpse	r24, r1
 492:	37 c0       	rjmp	.+110    	; 0x502 <__vector_1+0x98>
		mode = PEDESTRIAN_MODE;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <mode>
		if (led_number == 3 || led_number == 2)
 49a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 49e:	9e ef       	ldi	r25, 0xFE	; 254
 4a0:	98 0f       	add	r25, r24
 4a2:	92 30       	cpi	r25, 0x02	; 2
 4a4:	a8 f4       	brcc	.+42     	; 0x4d0 <__vector_1+0x66>
		{
			if (LED_TIMER_stop() == ERROR){
 4a6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_TIMER_stop>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <__vector_1+0x4c>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	83 e4       	ldi	r24, 0x43	; 67
 4b2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			overflowCounter = 0;
 4b6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflowCounter+0x1>
 4ba:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflowCounter>
			if (LED_TIMER_start() == ERROR){
 4be:	0e 94 39 03 	call	0x672	; 0x672 <LED_TIMER_start>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	f1 f4       	brne	.+60     	; 0x502 <__vector_1+0x98>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	83 e4       	ldi	r24, 0x43	; 67
 4ca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 4ce:	19 c0       	rjmp	.+50     	; 0x502 <__vector_1+0x98>
			}
		}
		else if (led_number == 1)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	b9 f4       	brne	.+46     	; 0x502 <__vector_1+0x98>
		{
			led_number = 2;
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (LED_TIMER_stop() == ERROR){
 4da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED_TIMER_stop>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	21 f4       	brne	.+8      	; 0x4ea <__vector_1+0x80>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	83 e4       	ldi	r24, 0x43	; 67
 4e6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
			overflowCounter = 0;
 4ea:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflowCounter+0x1>
 4ee:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflowCounter>
			if (LED_TIMER_start() == ERROR){
 4f2:	0e 94 39 03 	call	0x672	; 0x672 <LED_TIMER_start>
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	21 f4       	brne	.+8      	; 0x502 <__vector_1+0x98>
				LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	83 e4       	ldi	r24, 0x43	; 67
 4fe:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
			}
		}
	}
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_10>:

ISR(TIMER_0_INT){
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
	if (overflowCounter >= OVERFLOWS){
 546:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <overflowCounter>
 54a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <overflowCounter+0x1>
 54e:	81 33       	cpi	r24, 0x31	; 49
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	92 07       	cpc	r25, r18
 554:	10 f1       	brcs	.+68     	; 0x59a <__vector_10+0x76>
		if (led_number == 1){
 556:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	21 f4       	brne	.+8      	; 0x566 <__vector_10+0x42>
			led_number++;
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 564:	15 c0       	rjmp	.+42     	; 0x590 <__vector_10+0x6c>
		}
		else if (led_number == 3){
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	21 f4       	brne	.+8      	; 0x572 <__vector_10+0x4e>
			led_number--;
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 570:	0f c0       	rjmp	.+30     	; 0x590 <__vector_10+0x6c>
		}
		else if (led_number == 2){
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	69 f4       	brne	.+26     	; 0x590 <__vector_10+0x6c>
			if (flag == 0){
 576:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 57a:	91 11       	cpse	r25, r1
 57c:	04 c0       	rjmp	.+8      	; 0x586 <__vector_10+0x62>
				led_number--;
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 584:	05 c0       	rjmp	.+10     	; 0x590 <__vector_10+0x6c>
			}
			else if (flag == 1){
 586:	91 30       	cpi	r25, 0x01	; 1
 588:	19 f4       	brne	.+6      	; 0x590 <__vector_10+0x6c>
				led_number++;
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		overflowCounter = 0;
 590:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflowCounter+0x1>
 594:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflowCounter>
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__vector_10+0x80>
	}
	else{
		overflowCounter++;
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <overflowCounter+0x1>
 5a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <overflowCounter>
	}
	if (LED_TIMER_start() == ERROR){
 5a4:	0e 94 39 03 	call	0x672	; 0x672 <LED_TIMER_start>
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <__vector_10+0x90>
		LED_on(LED_RUN_ERROR_PORT, LED_RUN_ERROR_PIN);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	83 e4       	ldi	r24, 0x43	; 67
 5b0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
	}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	4f 91       	pop	r20
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	0f 90       	pop	r0
 5d2:	1f 90       	pop	r1
 5d4:	18 95       	reti

000005d6 <BUTTON_init>:
}

/*read button state*/
uint8_t BUTTON_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *value){
	return DIO_read(buttonPort,buttonPin, value);
}
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_init>
 5dc:	08 95       	ret

000005de <BUTTON_INT_init>:

/*initialize button external interrupt*/
uint8_t BUTTON_INT_init(uint8_t buttonPort, uint8_t buttonPin){
		INT_init();					//enable global interrupts
 5de:	0e 94 36 05 	call	0xa6c	; 0xa6c <INT_init>
		return EXT_INT_init(INT0);	//enable external interrupt
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	0e 94 15 05 	call	0xa2a	; 0xa2a <EXT_INT_init>
 5e8:	08 95       	ret

000005ea <LED_init>:
	delay = LED_TIMER_delay();
	if (toggle == ERROR || delay == ERROR){
		return ERROR;
	}
	return OK;
}
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_init>
 5f0:	08 95       	ret

000005f2 <LED_on>:
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	0e 94 19 04 	call	0x832	; 0x832 <DIO_write>
 5f8:	08 95       	ret

000005fa <LED_off>:
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	0e 94 19 04 	call	0x832	; 0x832 <DIO_write>
 600:	08 95       	ret

00000602 <LED_toggle>:
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	1f 92       	push	r1
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	08 2f       	mov	r16, r24
 614:	f6 2e       	mov	r15, r22
 616:	19 82       	std	Y+1, r1	; 0x01
 618:	ae 01       	movw	r20, r28
 61a:	4f 5f       	subi	r20, 0xFF	; 255
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	0e 94 a6 04 	call	0x94c	; 0x94c <DIO_read>
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	a1 f0       	breq	.+40     	; 0x64e <LED_toggle+0x4c>
 626:	19 81       	ldd	r17, Y+1	; 0x01
 628:	11 11       	cpse	r17, r1
 62a:	08 c0       	rjmp	.+16     	; 0x63c <LED_toggle+0x3a>
 62c:	6f 2d       	mov	r22, r15
 62e:	80 2f       	mov	r24, r16
 630:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LED_on>
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	81 f4       	brne	.+32     	; 0x658 <LED_toggle+0x56>
 638:	11 e0       	ldi	r17, 0x01	; 1
 63a:	0e c0       	rjmp	.+28     	; 0x658 <LED_toggle+0x56>
 63c:	11 30       	cpi	r17, 0x01	; 1
 63e:	49 f4       	brne	.+18     	; 0x652 <LED_toggle+0x50>
 640:	6f 2d       	mov	r22, r15
 642:	80 2f       	mov	r24, r16
 644:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LED_off>
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	29 f4       	brne	.+10     	; 0x656 <LED_toggle+0x54>
 64c:	05 c0       	rjmp	.+10     	; 0x658 <LED_toggle+0x56>
 64e:	11 e0       	ldi	r17, 0x01	; 1
 650:	03 c0       	rjmp	.+6      	; 0x658 <LED_toggle+0x56>
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	01 c0       	rjmp	.+2      	; 0x658 <LED_toggle+0x56>
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	81 2f       	mov	r24, r17
 65a:	0f 90       	pop	r0
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	08 95       	ret

00000668 <LED_TIMER_init>:
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <TIMER_init>
 670:	08 95       	ret

00000672 <LED_TIMER_start>:
 672:	cf 93       	push	r28
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 ab 06 	call	0xd56	; 0xd56 <TIMER_set_value>
 67c:	c8 2f       	mov	r28, r24
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	54 e0       	ldi	r21, 0x04	; 4
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <TIMER_start>
 68c:	c1 30       	cpi	r28, 0x01	; 1
 68e:	19 f0       	breq	.+6      	; 0x696 <LED_TIMER_start+0x24>
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	19 f4       	brne	.+6      	; 0x69a <LED_TIMER_start+0x28>
 694:	03 c0       	rjmp	.+6      	; 0x69c <LED_TIMER_start+0x2a>
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	01 c0       	rjmp	.+2      	; 0x69c <LED_TIMER_start+0x2a>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <LED_TIMER_stop>:
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	0e 94 d2 05 	call	0xba4	; 0xba4 <TIMER_stop>
 6a6:	08 95       	ret

000006a8 <LED_TIMER_delay>:
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	0e 94 ab 06 	call	0xd56	; 0xd56 <TIMER_set_value>
 6b6:	c8 2f       	mov	r28, r24
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	54 e0       	ldi	r21, 0x04	; 4
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <TIMER_start>
 6c6:	d8 2f       	mov	r29, r24
 6c8:	6e e1       	ldi	r22, 0x1E	; 30
 6ca:	82 e0       	ldi	r24, 0x02	; 2
 6cc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <TIMER_delay>
 6d0:	18 2f       	mov	r17, r24
 6d2:	82 e0       	ldi	r24, 0x02	; 2
 6d4:	0e 94 d2 05 	call	0xba4	; 0xba4 <TIMER_stop>
 6d8:	c1 30       	cpi	r28, 0x01	; 1
 6da:	41 f0       	breq	.+16     	; 0x6ec <LED_TIMER_delay+0x44>
 6dc:	d1 30       	cpi	r29, 0x01	; 1
 6de:	41 f0       	breq	.+16     	; 0x6f0 <LED_TIMER_delay+0x48>
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	41 f0       	breq	.+16     	; 0x6f4 <LED_TIMER_delay+0x4c>
 6e4:	11 30       	cpi	r17, 0x01	; 1
 6e6:	41 f4       	brne	.+16     	; 0x6f8 <LED_TIMER_delay+0x50>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <LED_TIMER_delay+0x52>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <LED_TIMER_delay+0x52>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <LED_TIMER_delay+0x52>
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <LED_TIMER_delay+0x52>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	08 95       	ret

00000702 <LED_TIMER_INT_init>:

uint8_t LED_TIMER_INT_init(void){
	INT_init();						//Enable global interrupts
 702:	0e 94 36 05 	call	0xa6c	; 0xa6c <INT_init>
	return TIMER_INT_init(TIMER_0);	//Enable timer 0 interrupt
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	0e 94 38 05 	call	0xa70	; 0xa70 <TIMER_INT_init>
 70c:	08 95       	ret

0000070e <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 70e:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
    while(1){
		App_start();
 712:	0e 94 ba 00 	call	0x174	; 0x174 <App_start>
 716:	fd cf       	rjmp	.-6      	; 0x712 <main+0x4>

00000718 <DIO_init>:
 */ 

#include "dio.h"

uint8_t DIO_init(uint8_t portNumber, uint8_t pinNumber,uint8_t direction){
	switch(portNumber)
 718:	82 34       	cpi	r24, 0x42	; 66
 71a:	49 f1       	breq	.+82     	; 0x76e <DIO_init+0x56>
 71c:	18 f4       	brcc	.+6      	; 0x724 <DIO_init+0xc>
 71e:	81 34       	cpi	r24, 0x41	; 65
 720:	41 f0       	breq	.+16     	; 0x732 <DIO_init+0x1a>
 722:	7d c0       	rjmp	.+250    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 724:	83 34       	cpi	r24, 0x43	; 67
 726:	09 f4       	brne	.+2      	; 0x72a <DIO_init+0x12>
 728:	40 c0       	rjmp	.+128    	; 0x7aa <DIO_init+0x92>
 72a:	84 34       	cpi	r24, 0x44	; 68
 72c:	09 f4       	brne	.+2      	; 0x730 <DIO_init+0x18>
 72e:	5a c0       	rjmp	.+180    	; 0x7e4 <DIO_init+0xcc>
 730:	76 c0       	rjmp	.+236    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
	{
		case PORT_A:
			if (direction == IN)
 732:	41 11       	cpse	r20, r1
 734:	0d c0       	rjmp	.+26     	; 0x750 <DIO_init+0x38>
			{
				DDRA &= ~(1<<pinNumber); //input
 736:	2a b3       	in	r18, 0x1a	; 26
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_init+0x2a>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_init+0x26>
 746:	80 95       	com	r24
 748:	82 23       	and	r24, r18
 74a:	8a bb       	out	0x1a, r24	; 26
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	08 95       	ret
		case PORT_A:
			if (direction == IN)
			{
				DDRA &= ~(1<<pinNumber); //input
			}
			else if (direction == OUT)
 750:	41 30       	cpi	r20, 0x01	; 1
 752:	09 f0       	breq	.+2      	; 0x756 <DIO_init+0x3e>
 754:	66 c0       	rjmp	.+204    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			{
				DDRA |= (1<<pinNumber); //output
 756:	2a b3       	in	r18, 0x1a	; 26
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_init+0x4a>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_init+0x46>
 766:	82 2b       	or	r24, r18
 768:	8a bb       	out	0x1a, r24	; 26
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	08 95       	ret
			else {
				return ERROR;
			}
		break;
		case PORT_B:
		if (direction == IN)
 76e:	41 11       	cpse	r20, r1
 770:	0d c0       	rjmp	.+26     	; 0x78c <DIO_init+0x74>
		{
			DDRB &= ~(1<<pinNumber); //input
 772:	27 b3       	in	r18, 0x17	; 23
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_init+0x66>
 77a:	88 0f       	add	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	6a 95       	dec	r22
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_init+0x62>
 782:	80 95       	com	r24
 784:	82 23       	and	r24, r18
 786:	87 bb       	out	0x17, r24	; 23
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	08 95       	ret
		case PORT_B:
		if (direction == IN)
		{
			DDRB &= ~(1<<pinNumber); //input
		}
		else if (direction == OUT)
 78c:	41 30       	cpi	r20, 0x01	; 1
 78e:	09 f0       	breq	.+2      	; 0x792 <DIO_init+0x7a>
 790:	4a c0       	rjmp	.+148    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		{
			DDRB |= (1<<pinNumber); //output
 792:	27 b3       	in	r18, 0x17	; 23
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_init+0x86>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	6a 95       	dec	r22
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_init+0x82>
 7a2:	82 2b       	or	r24, r18
 7a4:	87 bb       	out	0x17, r24	; 23
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		case PORT_C:
		if (direction == IN)
 7aa:	41 11       	cpse	r20, r1
 7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <DIO_init+0xb0>
		{
			DDRC &= ~(1<<pinNumber); //input
 7ae:	24 b3       	in	r18, 0x14	; 20
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_init+0xa2>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	6a 95       	dec	r22
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_init+0x9e>
 7be:	80 95       	com	r24
 7c0:	82 23       	and	r24, r18
 7c2:	84 bb       	out	0x14, r24	; 20
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret
		case PORT_C:
		if (direction == IN)
		{
			DDRC &= ~(1<<pinNumber); //input
		}
		else if (direction == OUT)
 7c8:	41 30       	cpi	r20, 0x01	; 1
 7ca:	79 f5       	brne	.+94     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			DDRC |= (1<<pinNumber); //output
 7cc:	24 b3       	in	r18, 0x14	; 20
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_init+0xc0>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_init+0xbc>
 7dc:	82 2b       	or	r24, r18
 7de:	84 bb       	out	0x14, r24	; 20
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		case PORT_D:
		if (direction == IN)
 7e4:	41 11       	cpse	r20, r1
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			DDRD &= ~(1<<pinNumber); //input
 7e8:	21 b3       	in	r18, 0x11	; 17
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_init+0xdc>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_init+0xd8>
 7f8:	80 95       	com	r24
 7fa:	82 23       	and	r24, r18
 7fc:	81 bb       	out	0x11, r24	; 17
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	08 95       	ret
		case PORT_D:
		if (direction == IN)
		{
			DDRD &= ~(1<<pinNumber); //input
		}
		else if (direction == OUT)
 802:	41 30       	cpi	r20, 0x01	; 1
 804:	a1 f4       	brne	.+40     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		{
			DDRD |= (1<<pinNumber); //output
 806:	21 b3       	in	r18, 0x11	; 17
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	6a 95       	dec	r22
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	82 2b       	or	r24, r18
 818:	81 bb       	out	0x11, r24	; 17
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		default:
		return ERROR;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	08 95       	ret
			else if (direction == OUT)
			{
				DDRA |= (1<<pinNumber); //output
			}
			else {
				return ERROR;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	08 95       	ret
		else if (direction == OUT)
		{
			DDRB |= (1<<pinNumber); //output
		}
		else {
			return ERROR;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	08 95       	ret
		else if (direction == OUT)
		{
			DDRC |= (1<<pinNumber); //output
		}
		else {
			return ERROR;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	08 95       	ret
		else if (direction == OUT)
		{
			DDRD |= (1<<pinNumber); //output
		}
		else {
			return ERROR;
 82e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return ERROR;
	}
	return OK;
}
 830:	08 95       	ret

00000832 <DIO_write>:

uint8_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber)
 832:	82 34       	cpi	r24, 0x42	; 66
 834:	49 f1       	breq	.+82     	; 0x888 <__stack+0x29>
 836:	18 f4       	brcc	.+6      	; 0x83e <DIO_write+0xc>
 838:	81 34       	cpi	r24, 0x41	; 65
 83a:	41 f0       	breq	.+16     	; 0x84c <DIO_write+0x1a>
 83c:	7d c0       	rjmp	.+250    	; 0x938 <__stack+0xd9>
 83e:	83 34       	cpi	r24, 0x43	; 67
 840:	09 f4       	brne	.+2      	; 0x844 <DIO_write+0x12>
 842:	40 c0       	rjmp	.+128    	; 0x8c4 <__stack+0x65>
 844:	84 34       	cpi	r24, 0x44	; 68
 846:	09 f4       	brne	.+2      	; 0x84a <DIO_write+0x18>
 848:	5a c0       	rjmp	.+180    	; 0x8fe <__stack+0x9f>
 84a:	76 c0       	rjmp	.+236    	; 0x938 <__stack+0xd9>
	{
		case PORT_A:
		if (value == LOW)
 84c:	41 11       	cpse	r20, r1
 84e:	0d c0       	rjmp	.+26     	; 0x86a <__stack+0xb>
		{
			PORTA &= ~(1<<pinNumber); //write 0
 850:	2b b3       	in	r18, 0x1b	; 27
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_write+0x2a>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	6a 95       	dec	r22
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_write+0x26>
 860:	80 95       	com	r24
 862:	82 23       	and	r24, r18
 864:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return ERROR;
		
	}
	return OK;
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
		case PORT_A:
		if (value == LOW)
		{
			PORTA &= ~(1<<pinNumber); //write 0
		}
		else if (value == HIGH)
 86a:	41 30       	cpi	r20, 0x01	; 1
 86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
 86e:	66 c0       	rjmp	.+204    	; 0x93c <__stack+0xdd>
		{
			PORTA |= (1<<pinNumber); //write 1
 870:	2b b3       	in	r18, 0x1b	; 27
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	6a 95       	dec	r22
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	82 2b       	or	r24, r18
 882:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return ERROR;
		
	}
	return OK;
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		case PORT_B:
		if (value == LOW)
 888:	41 11       	cpse	r20, r1
 88a:	0d c0       	rjmp	.+26     	; 0x8a6 <__stack+0x47>
		{
			PORTB &= ~(1<<pinNumber); //write 0
 88c:	28 b3       	in	r18, 0x18	; 24
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	6a 95       	dec	r22
 89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
 89c:	80 95       	com	r24
 89e:	82 23       	and	r24, r18
 8a0:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return ERROR;
		
	}
	return OK;
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	08 95       	ret
		case PORT_B:
		if (value == LOW)
		{
			PORTB &= ~(1<<pinNumber); //write 0
		}
		else if (value == HIGH)
 8a6:	41 30       	cpi	r20, 0x01	; 1
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	4a c0       	rjmp	.+148    	; 0x940 <__stack+0xe1>
		{
			PORTB |= (1<<pinNumber); //write 1
 8ac:	28 b3       	in	r18, 0x18	; 24
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	6a 95       	dec	r22
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	82 2b       	or	r24, r18
 8be:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return ERROR;
		
	}
	return OK;
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		case PORT_C:
		if (value == LOW)
 8c4:	41 11       	cpse	r20, r1
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__stack+0x83>
		{
			PORTC &= ~(1<<pinNumber); //write 0
 8c8:	25 b3       	in	r18, 0x15	; 21
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	6a 95       	dec	r22
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	80 95       	com	r24
 8da:	82 23       	and	r24, r18
 8dc:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return ERROR;
		
	}
	return OK;
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	08 95       	ret
		case PORT_C:
		if (value == LOW)
		{
			PORTC &= ~(1<<pinNumber); //write 0
		}
		else if (value == HIGH)
 8e2:	41 30       	cpi	r20, 0x01	; 1
 8e4:	79 f5       	brne	.+94     	; 0x944 <__stack+0xe5>
		{
			PORTC |= (1<<pinNumber); //write 1
 8e6:	25 b3       	in	r18, 0x15	; 21
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	6a 95       	dec	r22
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	82 2b       	or	r24, r18
 8f8:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return ERROR;
		
	}
	return OK;
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		case PORT_D:
		if (value == LOW)
 8fe:	41 11       	cpse	r20, r1
 900:	0d c0       	rjmp	.+26     	; 0x91c <__stack+0xbd>
		{
			PORTD &= ~(1<<pinNumber); //write 0
 902:	22 b3       	in	r18, 0x12	; 18
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	6a 95       	dec	r22
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	80 95       	com	r24
 914:	82 23       	and	r24, r18
 916:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return ERROR;
		
	}
	return OK;
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	08 95       	ret
		case PORT_D:
		if (value == LOW)
		{
			PORTD &= ~(1<<pinNumber); //write 0
		}
		else if (value == HIGH)
 91c:	41 30       	cpi	r20, 0x01	; 1
 91e:	a1 f4       	brne	.+40     	; 0x948 <__stack+0xe9>
		{
			PORTD |= (1<<pinNumber); //write 1
 920:	22 b3       	in	r18, 0x12	; 18
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	6a 95       	dec	r22
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	82 2b       	or	r24, r18
 932:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return ERROR;
		
	}
	return OK;
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	08 95       	ret
		else {
			return ERROR;
		}
		break;
		default:
		return ERROR;
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	08 95       	ret
		else if (value == HIGH)
		{
			PORTA |= (1<<pinNumber); //write 1
		}
		else {
			return ERROR;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	08 95       	ret
		else if (value == HIGH)
		{
			PORTB |= (1<<pinNumber); //write 1
		}
		else {
			return ERROR;
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	08 95       	ret
		else if (value == HIGH)
		{
			PORTC |= (1<<pinNumber); //write 1
		}
		else {
			return ERROR;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
		else if (value == HIGH)
		{
			PORTD |= (1<<pinNumber); //write 1
		}
		else {
			return ERROR;
 948:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return ERROR;
		
	}
	return OK;
}
 94a:	08 95       	ret

0000094c <DIO_read>:


uint8_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value){
	if (pinNumber > 7)
 94c:	68 30       	cpi	r22, 0x08	; 8
 94e:	08 f0       	brcs	.+2      	; 0x952 <DIO_read+0x6>
 950:	68 c0       	rjmp	.+208    	; 0xa22 <DIO_read+0xd6>
	{
		return ERROR;
	}
	switch(portNumber)
 952:	82 34       	cpi	r24, 0x42	; 66
 954:	09 f1       	breq	.+66     	; 0x998 <DIO_read+0x4c>
 956:	18 f4       	brcc	.+6      	; 0x95e <DIO_read+0x12>
 958:	81 34       	cpi	r24, 0x41	; 65
 95a:	39 f0       	breq	.+14     	; 0x96a <DIO_read+0x1e>
 95c:	64 c0       	rjmp	.+200    	; 0xa26 <DIO_read+0xda>
 95e:	83 34       	cpi	r24, 0x43	; 67
 960:	91 f1       	breq	.+100    	; 0x9c6 <DIO_read+0x7a>
 962:	84 34       	cpi	r24, 0x44	; 68
 964:	09 f4       	brne	.+2      	; 0x968 <DIO_read+0x1c>
 966:	46 c0       	rjmp	.+140    	; 0x9f4 <DIO_read+0xa8>
 968:	5e c0       	rjmp	.+188    	; 0xa26 <DIO_read+0xda>
	{
		case PORT_A:
		*value = (PINA & (1<<pinNumber))>>pinNumber;
 96a:	79 b3       	in	r23, 0x19	; 25
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	9c 01       	movw	r18, r24
 972:	06 2e       	mov	r0, r22
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_read+0x2e>
 976:	22 0f       	add	r18, r18
 978:	33 1f       	adc	r19, r19
 97a:	0a 94       	dec	r0
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_read+0x2a>
 97e:	87 2f       	mov	r24, r23
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	82 23       	and	r24, r18
 984:	93 23       	and	r25, r19
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_read+0x40>
 988:	95 95       	asr	r25
 98a:	87 95       	ror	r24
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_read+0x3c>
 990:	fa 01       	movw	r30, r20
 992:	80 83       	st	Z, r24
		*value = (PIND & (1<<pinNumber))>>pinNumber;
		break;
		default:
		return ERROR;
	}
	return OK;
 994:	80 e0       	ldi	r24, 0x00	; 0
	}
	switch(portNumber)
	{
		case PORT_A:
		*value = (PINA & (1<<pinNumber))>>pinNumber;
		break;
 996:	08 95       	ret
		case PORT_B:
		*value = (PINB & (1<<pinNumber))>>pinNumber;
 998:	76 b3       	in	r23, 0x16	; 22
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	9c 01       	movw	r18, r24
 9a0:	06 2e       	mov	r0, r22
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_read+0x5c>
 9a4:	22 0f       	add	r18, r18
 9a6:	33 1f       	adc	r19, r19
 9a8:	0a 94       	dec	r0
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_read+0x58>
 9ac:	87 2f       	mov	r24, r23
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	82 23       	and	r24, r18
 9b2:	93 23       	and	r25, r19
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_read+0x6e>
 9b6:	95 95       	asr	r25
 9b8:	87 95       	ror	r24
 9ba:	6a 95       	dec	r22
 9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_read+0x6a>
 9be:	fa 01       	movw	r30, r20
 9c0:	80 83       	st	Z, r24
		*value = (PIND & (1<<pinNumber))>>pinNumber;
		break;
		default:
		return ERROR;
	}
	return OK;
 9c2:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
		*value = (PINA & (1<<pinNumber))>>pinNumber;
		break;
		case PORT_B:
		*value = (PINB & (1<<pinNumber))>>pinNumber;
		break;
 9c4:	08 95       	ret
		case PORT_C:
		*value = (PINC & (1<<pinNumber))>>pinNumber;
 9c6:	73 b3       	in	r23, 0x13	; 19
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	9c 01       	movw	r18, r24
 9ce:	06 2e       	mov	r0, r22
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_read+0x8a>
 9d2:	22 0f       	add	r18, r18
 9d4:	33 1f       	adc	r19, r19
 9d6:	0a 94       	dec	r0
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_read+0x86>
 9da:	87 2f       	mov	r24, r23
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	82 23       	and	r24, r18
 9e0:	93 23       	and	r25, r19
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <DIO_read+0x9c>
 9e4:	95 95       	asr	r25
 9e6:	87 95       	ror	r24
 9e8:	6a 95       	dec	r22
 9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <DIO_read+0x98>
 9ec:	fa 01       	movw	r30, r20
 9ee:	80 83       	st	Z, r24
		*value = (PIND & (1<<pinNumber))>>pinNumber;
		break;
		default:
		return ERROR;
	}
	return OK;
 9f0:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
		*value = (PINB & (1<<pinNumber))>>pinNumber;
		break;
		case PORT_C:
		*value = (PINC & (1<<pinNumber))>>pinNumber;
		break;
 9f2:	08 95       	ret
		case PORT_D:
		*value = (PIND & (1<<pinNumber))>>pinNumber;
 9f4:	70 b3       	in	r23, 0x10	; 16
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	9c 01       	movw	r18, r24
 9fc:	06 2e       	mov	r0, r22
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_read+0xb8>
 a00:	22 0f       	add	r18, r18
 a02:	33 1f       	adc	r19, r19
 a04:	0a 94       	dec	r0
 a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_read+0xb4>
 a08:	87 2f       	mov	r24, r23
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	82 23       	and	r24, r18
 a0e:	93 23       	and	r25, r19
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_read+0xca>
 a12:	95 95       	asr	r25
 a14:	87 95       	ror	r24
 a16:	6a 95       	dec	r22
 a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_read+0xc6>
 a1a:	fa 01       	movw	r30, r20
 a1c:	80 83       	st	Z, r24
		break;
		default:
		return ERROR;
	}
	return OK;
 a1e:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
		*value = (PINC & (1<<pinNumber))>>pinNumber;
		break;
		case PORT_D:
		*value = (PIND & (1<<pinNumber))>>pinNumber;
		break;
 a20:	08 95       	ret


uint8_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value){
	if (pinNumber > 7)
	{
		return ERROR;
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	08 95       	ret
		break;
		case PORT_D:
		*value = (PIND & (1<<pinNumber))>>pinNumber;
		break;
		default:
		return ERROR;
 a26:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
 a28:	08 95       	ret

00000a2a <EXT_INT_init>:
#include "interrupt.h"


/*Enable external interrupts*/
uint8_t EXT_INT_init(uint8_t intNumber){
	switch (intNumber){
 a2a:	86 30       	cpi	r24, 0x06	; 6
 a2c:	29 f0       	breq	.+10     	; 0xa38 <EXT_INT_init+0xe>
 a2e:	87 30       	cpi	r24, 0x07	; 7
 a30:	59 f0       	breq	.+22     	; 0xa48 <EXT_INT_init+0x1e>
 a32:	85 30       	cpi	r24, 0x05	; 5
 a34:	c9 f4       	brne	.+50     	; 0xa68 <EXT_INT_init+0x3e>
 a36:	10 c0       	rjmp	.+32     	; 0xa58 <EXT_INT_init+0x2e>
		case INT0:
		MCUCR |= (1<<ISC00) | (1<<ISC01);		//choose external interrupt 0 sense rising edge
 a38:	85 b7       	in	r24, 0x35	; 53
 a3a:	83 60       	ori	r24, 0x03	; 3
 a3c:	85 bf       	out	0x35, r24	; 53
		GICR |= (1<<INT0);						//Enable external interrupt 0
 a3e:	8b b7       	in	r24, 0x3b	; 59
 a40:	80 64       	ori	r24, 0x40	; 64
 a42:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1<<INT2);						//Enable external interrupt 2
		break;		
		default:
		return ERROR;
	}
	return OK;
 a44:	80 e0       	ldi	r24, 0x00	; 0
uint8_t EXT_INT_init(uint8_t intNumber){
	switch (intNumber){
		case INT0:
		MCUCR |= (1<<ISC00) | (1<<ISC01);		//choose external interrupt 0 sense rising edge
		GICR |= (1<<INT0);						//Enable external interrupt 0
		break;
 a46:	08 95       	ret
		case INT1:
		MCUCR |= (1<<ISC10) | (1<<ISC11);		//choose external interrupt 1 sense rising edge
 a48:	85 b7       	in	r24, 0x35	; 53
 a4a:	8c 60       	ori	r24, 0x0C	; 12
 a4c:	85 bf       	out	0x35, r24	; 53
		GICR |= (1<<INT1);						//Enable external interrupt 1
 a4e:	8b b7       	in	r24, 0x3b	; 59
 a50:	80 68       	ori	r24, 0x80	; 128
 a52:	8b bf       	out	0x3b, r24	; 59
		GICR |= (1<<INT2);						//Enable external interrupt 2
		break;		
		default:
		return ERROR;
	}
	return OK;
 a54:	80 e0       	ldi	r24, 0x00	; 0
		GICR |= (1<<INT0);						//Enable external interrupt 0
		break;
		case INT1:
		MCUCR |= (1<<ISC10) | (1<<ISC11);		//choose external interrupt 1 sense rising edge
		GICR |= (1<<INT1);						//Enable external interrupt 1
		break;
 a56:	08 95       	ret
		case INT2:
		MCUCSR |= (1<<ISC2);					//choose external interrupt 2 sense rising edge
 a58:	84 b7       	in	r24, 0x34	; 52
 a5a:	80 64       	ori	r24, 0x40	; 64
 a5c:	84 bf       	out	0x34, r24	; 52
		GICR |= (1<<INT2);						//Enable external interrupt 2
 a5e:	8b b7       	in	r24, 0x3b	; 59
 a60:	80 62       	ori	r24, 0x20	; 32
 a62:	8b bf       	out	0x3b, r24	; 59
		break;		
		default:
		return ERROR;
	}
	return OK;
 a64:	80 e0       	ldi	r24, 0x00	; 0
		GICR |= (1<<INT1);						//Enable external interrupt 1
		break;
		case INT2:
		MCUCSR |= (1<<ISC2);					//choose external interrupt 2 sense rising edge
		GICR |= (1<<INT2);						//Enable external interrupt 2
		break;		
 a66:	08 95       	ret
		default:
		return ERROR;
 a68:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
}
 a6a:	08 95       	ret

00000a6c <INT_init>:


/*Enable global interrupts*/
void INT_init(void){
	sei();										//Enable global interrupts
 a6c:	78 94       	sei
 a6e:	08 95       	ret

00000a70 <TIMER_INT_init>:
}


/*Enable timer interrupts*/
uint8_t TIMER_INT_init(uint8_t timerNumber){
	switch (timerNumber){
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	49 f0       	breq	.+18     	; 0xa86 <TIMER_INT_init+0x16>
 a74:	18 f0       	brcs	.+6      	; 0xa7c <TIMER_INT_init+0xc>
 a76:	82 30       	cpi	r24, 0x02	; 2
 a78:	71 f0       	breq	.+28     	; 0xa96 <TIMER_INT_init+0x26>
 a7a:	12 c0       	rjmp	.+36     	; 0xaa0 <TIMER_INT_init+0x30>
		case TIMER_0:
		TIMSK |= (1<<OCIE0);					//Enable Timer 0 interrupt
 a7c:	89 b7       	in	r24, 0x39	; 57
 a7e:	82 60       	ori	r24, 0x02	; 2
 a80:	89 bf       	out	0x39, r24	; 57
		TIMSK |= (1<<OCIE2);					//Enable Timer 2 interrupt
		break;
		default:
		return ERROR;
	}
	return OK;
 a82:	80 e0       	ldi	r24, 0x00	; 0
/*Enable timer interrupts*/
uint8_t TIMER_INT_init(uint8_t timerNumber){
	switch (timerNumber){
		case TIMER_0:
		TIMSK |= (1<<OCIE0);					//Enable Timer 0 interrupt
		break;
 a84:	08 95       	ret
		case TIMER_1:
		TIMSK |= (1<<OCIE1A);					//Enable Timer 1 interrupt
 a86:	89 b7       	in	r24, 0x39	; 57
 a88:	80 61       	ori	r24, 0x10	; 16
 a8a:	89 bf       	out	0x39, r24	; 57
		TIMSK |= (1<<OCIE1B);
 a8c:	89 b7       	in	r24, 0x39	; 57
 a8e:	88 60       	ori	r24, 0x08	; 8
 a90:	89 bf       	out	0x39, r24	; 57
		TIMSK |= (1<<OCIE2);					//Enable Timer 2 interrupt
		break;
		default:
		return ERROR;
	}
	return OK;
 a92:	80 e0       	ldi	r24, 0x00	; 0
		TIMSK |= (1<<OCIE0);					//Enable Timer 0 interrupt
		break;
		case TIMER_1:
		TIMSK |= (1<<OCIE1A);					//Enable Timer 1 interrupt
		TIMSK |= (1<<OCIE1B);
		break;
 a94:	08 95       	ret
		case TIMER_2:
		TIMSK |= (1<<OCIE2);					//Enable Timer 2 interrupt
 a96:	89 b7       	in	r24, 0x39	; 57
 a98:	80 68       	ori	r24, 0x80	; 128
 a9a:	89 bf       	out	0x39, r24	; 57
		break;
		default:
		return ERROR;
	}
	return OK;
 a9c:	80 e0       	ldi	r24, 0x00	; 0
		TIMSK |= (1<<OCIE1A);					//Enable Timer 1 interrupt
		TIMSK |= (1<<OCIE1B);
		break;
		case TIMER_2:
		TIMSK |= (1<<OCIE2);					//Enable Timer 2 interrupt
		break;
 a9e:	08 95       	ret
		default:
		return ERROR;
 aa0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
 aa2:	08 95       	ret

00000aa4 <TIMER_init>:
 */ 

#include "timer.h"

uint8_t TIMER_init(uint8_t timerNumber, uint8_t timerMode){
	switch (timerNumber)
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	31 f1       	breq	.+76     	; 0xaf4 <TIMER_init+0x50>
 aa8:	20 f0       	brcs	.+8      	; 0xab2 <TIMER_init+0xe>
 aaa:	82 30       	cpi	r24, 0x02	; 2
 aac:	09 f4       	brne	.+2      	; 0xab0 <TIMER_init+0xc>
 aae:	51 c0       	rjmp	.+162    	; 0xb52 <TIMER_init+0xae>
 ab0:	71 c0       	rjmp	.+226    	; 0xb94 <TIMER_init+0xf0>
	{
		case TIMER_0:
		TCNT0 = 0x00;						//initial value of timer 0
 ab2:	12 be       	out	0x32, r1	; 50
		switch (timerMode){
 ab4:	61 30       	cpi	r22, 0x01	; 1
 ab6:	49 f0       	breq	.+18     	; 0xaca <TIMER_init+0x26>
 ab8:	28 f0       	brcs	.+10     	; 0xac4 <TIMER_init+0x20>
 aba:	62 30       	cpi	r22, 0x02	; 2
 abc:	61 f0       	breq	.+24     	; 0xad6 <TIMER_init+0x32>
 abe:	63 30       	cpi	r22, 0x03	; 3
 ac0:	81 f0       	breq	.+32     	; 0xae2 <TIMER_init+0x3e>
 ac2:	6a c0       	rjmp	.+212    	; 0xb98 <TIMER_init+0xf4>
			case NORMAL_MODE:				 //normal mode
			TCCR0 = 0x00;
 ac4:	13 be       	out	0x33, r1	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 ac6:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_0:
		TCNT0 = 0x00;						//initial value of timer 0
		switch (timerMode){
			case NORMAL_MODE:				 //normal mode
			TCCR0 = 0x00;
			break;
 ac8:	08 95       	ret
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR0 = 0x00;					//stop timer
 aca:	13 be       	out	0x33, r1	; 51
			TCCR0 |= (1<<WGM00);			//set timer to pwm phase correct mode
 acc:	83 b7       	in	r24, 0x33	; 51
 ace:	80 64       	ori	r24, 0x40	; 64
 ad0:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 = 0x00;
			break;
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR0 = 0x00;					//stop timer
			TCCR0 |= (1<<WGM00);			//set timer to pwm phase correct mode
			break;
 ad4:	08 95       	ret
			case CTC_MODE:					//ctc mode
			TCCR0 = 0x00;					//stop timer
 ad6:	13 be       	out	0x33, r1	; 51
			TCCR0 |= (1<<WGM01);			//set timer to ctc mode
 ad8:	83 b7       	in	r24, 0x33	; 51
 ada:	88 60       	ori	r24, 0x08	; 8
 adc:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 ade:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= (1<<WGM00);			//set timer to pwm phase correct mode
			break;
			case CTC_MODE:					//ctc mode
			TCCR0 = 0x00;					//stop timer
			TCCR0 |= (1<<WGM01);			//set timer to ctc mode
			break;
 ae0:	08 95       	ret
			case FAST_PWM:					//fast pwm mode
			TCCR0 = 0x00;					//stop timer
 ae2:	13 be       	out	0x33, r1	; 51
			TCCR0 |= (1<<WGM00);			//set timer to fast pwm mode
 ae4:	83 b7       	in	r24, 0x33	; 51
 ae6:	80 64       	ori	r24, 0x40	; 64
 ae8:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1<<WGM01);				
 aea:	83 b7       	in	r24, 0x33	; 51
 aec:	88 60       	ori	r24, 0x08	; 8
 aee:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 af0:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case FAST_PWM:					//fast pwm mode
			TCCR0 = 0x00;					//stop timer
			TCCR0 |= (1<<WGM00);			//set timer to fast pwm mode
			TCCR0 |= (1<<WGM01);				
			break;
 af2:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		case TIMER_1:
		TCNT1H = 0x00;						//initial value of timer 0
 af4:	1d bc       	out	0x2d, r1	; 45
		TCNT1L = 0x00;
 af6:	1c bc       	out	0x2c, r1	; 44
		switch (timerMode){
 af8:	61 30       	cpi	r22, 0x01	; 1
 afa:	51 f0       	breq	.+20     	; 0xb10 <TIMER_init+0x6c>
 afc:	28 f0       	brcs	.+10     	; 0xb08 <TIMER_init+0x64>
 afe:	62 30       	cpi	r22, 0x02	; 2
 b00:	89 f0       	breq	.+34     	; 0xb24 <TIMER_init+0x80>
 b02:	63 30       	cpi	r22, 0x03	; 3
 b04:	b1 f0       	breq	.+44     	; 0xb32 <TIMER_init+0x8e>
 b06:	4a c0       	rjmp	.+148    	; 0xb9c <TIMER_init+0xf8>
			case NORMAL_MODE:				 //normal mode
			TCCR1A = 0x00;
 b08:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0x00;
 b0a:	1e bc       	out	0x2e, r1	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b0c:	80 e0       	ldi	r24, 0x00	; 0
		TCNT1L = 0x00;
		switch (timerMode){
			case NORMAL_MODE:				 //normal mode
			TCCR1A = 0x00;
			TCCR1B = 0x00;
			break;
 b0e:	08 95       	ret
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR1A = 0x00;					//stop timer
 b10:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0x00;
 b12:	1e bc       	out	0x2e, r1	; 46
			TCCR1A |= (1<<WGM10);			//set timer to pwm phase correct mode
 b14:	8f b5       	in	r24, 0x2f	; 47
 b16:	81 60       	ori	r24, 0x01	; 1
 b18:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<WGM11);			//set timer to pwm phase correct mode
 b1a:	8f b5       	in	r24, 0x2f	; 47
 b1c:	82 60       	ori	r24, 0x02	; 2
 b1e:	8f bd       	out	0x2f, r24	; 47
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b20:	80 e0       	ldi	r24, 0x00	; 0
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR1A = 0x00;					//stop timer
			TCCR1B = 0x00;
			TCCR1A |= (1<<WGM10);			//set timer to pwm phase correct mode
			TCCR1A |= (1<<WGM11);			//set timer to pwm phase correct mode
			break;
 b22:	08 95       	ret
			case CTC_MODE:					//ctc mode
			TCCR1A = 0x00;					//stop timer
 b24:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0x00;
 b26:	1e bc       	out	0x2e, r1	; 46
			TCCR1B |= (1<<WGM12);			//set timer to ctc mode
 b28:	8e b5       	in	r24, 0x2e	; 46
 b2a:	88 60       	ori	r24, 0x08	; 8
 b2c:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b2e:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CTC_MODE:					//ctc mode
			TCCR1A = 0x00;					//stop timer
			TCCR1B = 0x00;
			TCCR1B |= (1<<WGM12);			//set timer to ctc mode
			break;
 b30:	08 95       	ret
			case FAST_PWM:					//fast pwm mode
			TCCR1A = 0x00;					//stop timer
 b32:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0x00;
 b34:	1e bc       	out	0x2e, r1	; 46
			TCCR1A |= (1<<WGM10);			//set timer to fast pwm mode				
 b36:	8f b5       	in	r24, 0x2f	; 47
 b38:	81 60       	ori	r24, 0x01	; 1
 b3a:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= (1<<WGM11);
 b3c:	8f b5       	in	r24, 0x2f	; 47
 b3e:	82 60       	ori	r24, 0x02	; 2
 b40:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= (1<<WGM12);
 b42:	8e b5       	in	r24, 0x2e	; 46
 b44:	88 60       	ori	r24, 0x08	; 8
 b46:	8e bd       	out	0x2e, r24	; 46
			TCCR1B |= (1<<WGM13);
 b48:	8e b5       	in	r24, 0x2e	; 46
 b4a:	80 61       	ori	r24, 0x10	; 16
 b4c:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b4e:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1B = 0x00;
			TCCR1A |= (1<<WGM10);			//set timer to fast pwm mode				
			TCCR1A |= (1<<WGM11);
			TCCR1B |= (1<<WGM12);
			TCCR1B |= (1<<WGM13);
			break;
 b50:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		case TIMER_2:
		TCNT2 = 0x00;						//initial value of timer 0
 b52:	14 bc       	out	0x24, r1	; 36
		switch (timerMode){
 b54:	61 30       	cpi	r22, 0x01	; 1
 b56:	49 f0       	breq	.+18     	; 0xb6a <TIMER_init+0xc6>
 b58:	28 f0       	brcs	.+10     	; 0xb64 <TIMER_init+0xc0>
 b5a:	62 30       	cpi	r22, 0x02	; 2
 b5c:	61 f0       	breq	.+24     	; 0xb76 <TIMER_init+0xd2>
 b5e:	63 30       	cpi	r22, 0x03	; 3
 b60:	81 f0       	breq	.+32     	; 0xb82 <TIMER_init+0xde>
 b62:	1e c0       	rjmp	.+60     	; 0xba0 <TIMER_init+0xfc>
			case NORMAL_MODE:				 //normal mode
			TCCR2 = 0x00;
 b64:	15 bc       	out	0x25, r1	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b66:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_2:
		TCNT2 = 0x00;						//initial value of timer 0
		switch (timerMode){
			case NORMAL_MODE:				 //normal mode
			TCCR2 = 0x00;
			break;
 b68:	08 95       	ret
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR2 = 0x00;					//stop timer
 b6a:	15 bc       	out	0x25, r1	; 37
			TCCR2 |= (1<<WGM20);			//set timer to pwm phase correct mode
 b6c:	85 b5       	in	r24, 0x25	; 37
 b6e:	80 64       	ori	r24, 0x40	; 64
 b70:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b72:	80 e0       	ldi	r24, 0x00	; 0
			TCCR2 = 0x00;
			break;
			case PWM_PHASE_CORRECT_MODE:	//pwm phase correct mode
			TCCR2 = 0x00;					//stop timer
			TCCR2 |= (1<<WGM20);			//set timer to pwm phase correct mode
			break;
 b74:	08 95       	ret
			case CTC_MODE:					//ctc mode
			TCCR2 = 0x00;					//stop timer
 b76:	15 bc       	out	0x25, r1	; 37
			TCCR2 |= (1<<WGM21);			//set timer to ctc mode
 b78:	85 b5       	in	r24, 0x25	; 37
 b7a:	88 60       	ori	r24, 0x08	; 8
 b7c:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b7e:	80 e0       	ldi	r24, 0x00	; 0
			TCCR2 |= (1<<WGM20);			//set timer to pwm phase correct mode
			break;
			case CTC_MODE:					//ctc mode
			TCCR2 = 0x00;					//stop timer
			TCCR2 |= (1<<WGM21);			//set timer to ctc mode
			break;
 b80:	08 95       	ret
			case FAST_PWM:					//fast pwm mode
			TCCR2 = 0x00;					//stop timer
 b82:	15 bc       	out	0x25, r1	; 37
			TCCR2 |= (1<<WGM20);			//set timer to fast pwm mode
 b84:	85 b5       	in	r24, 0x25	; 37
 b86:	80 64       	ori	r24, 0x40	; 64
 b88:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= (1<<WGM21);				
 b8a:	85 b5       	in	r24, 0x25	; 37
 b8c:	88 60       	ori	r24, 0x08	; 8
 b8e:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 b90:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case FAST_PWM:					//fast pwm mode
			TCCR2 = 0x00;					//stop timer
			TCCR2 |= (1<<WGM20);			//set timer to fast pwm mode
			TCCR2 |= (1<<WGM21);				
			break;
 b92:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		default:
		return ERROR;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	08 95       	ret
			TCCR0 = 0x00;					//stop timer
			TCCR0 |= (1<<WGM00);			//set timer to fast pwm mode
			TCCR0 |= (1<<WGM01);				
			break;
			default:
			return ERROR;
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	08 95       	ret
			TCCR1A |= (1<<WGM11);
			TCCR1B |= (1<<WGM12);
			TCCR1B |= (1<<WGM13);
			break;
			default:
			return ERROR;
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	08 95       	ret
			TCCR2 = 0x00;					//stop timer
			TCCR2 |= (1<<WGM20);			//set timer to fast pwm mode
			TCCR2 |= (1<<WGM21);				
			break;
			default:
			return ERROR;
 ba0:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return ERROR;
	}
	return OK;
}
 ba2:	08 95       	ret

00000ba4 <TIMER_stop>:

uint8_t TIMER_stop(uint8_t timerNumber){
	switch (timerNumber)
 ba4:	81 30       	cpi	r24, 0x01	; 1
 ba6:	39 f0       	breq	.+14     	; 0xbb6 <TIMER_stop+0x12>
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <TIMER_stop+0xc>
 baa:	82 30       	cpi	r24, 0x02	; 2
 bac:	41 f0       	breq	.+16     	; 0xbbe <TIMER_stop+0x1a>
 bae:	0a c0       	rjmp	.+20     	; 0xbc4 <TIMER_stop+0x20>
	{
		case TIMER_0:
			TCCR0 = 0x00;			//Timer Stop
 bb0:	13 be       	out	0x33, r1	; 51
			TCCR2 = 0x00;			//Timer Stop
		break;
		default:
		return ERROR;
	}
	return OK;
 bb2:	80 e0       	ldi	r24, 0x00	; 0
uint8_t TIMER_stop(uint8_t timerNumber){
	switch (timerNumber)
	{
		case TIMER_0:
			TCCR0 = 0x00;			//Timer Stop
		break;
 bb4:	08 95       	ret
		case TIMER_1:
			TCCR1A = 0x00;			//Timer Stop
 bb6:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0x00;			//Timer Stop
 bb8:	1e bc       	out	0x2e, r1	; 46
			TCCR2 = 0x00;			//Timer Stop
		break;
		default:
		return ERROR;
	}
	return OK;
 bba:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 = 0x00;			//Timer Stop
		break;
		case TIMER_1:
			TCCR1A = 0x00;			//Timer Stop
			TCCR1B = 0x00;			//Timer Stop
		break;
 bbc:	08 95       	ret
		case TIMER_2:
			TCCR2 = 0x00;			//Timer Stop
 bbe:	15 bc       	out	0x25, r1	; 37
		break;
		default:
		return ERROR;
	}
	return OK;
 bc0:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1A = 0x00;			//Timer Stop
			TCCR1B = 0x00;			//Timer Stop
		break;
		case TIMER_2:
			TCCR2 = 0x00;			//Timer Stop
		break;
 bc2:	08 95       	ret
		default:
		return ERROR;
 bc4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
}
 bc6:	08 95       	ret

00000bc8 <TIMER_start>:

uint8_t TIMER_start(uint8_t timerNumber, uint32_t prescalar){
	switch (timerNumber)
 bc8:	81 30       	cpi	r24, 0x01	; 1
 bca:	09 f4       	brne	.+2      	; 0xbce <TIMER_start+0x6>
 bcc:	41 c0       	rjmp	.+130    	; 0xc50 <TIMER_start+0x88>
 bce:	20 f0       	brcs	.+8      	; 0xbd8 <TIMER_start+0x10>
 bd0:	82 30       	cpi	r24, 0x02	; 2
 bd2:	09 f4       	brne	.+2      	; 0xbd6 <TIMER_start+0xe>
 bd4:	79 c0       	rjmp	.+242    	; 0xcc8 <TIMER_start+0x100>
 bd6:	b7 c0       	rjmp	.+366    	; 0xd46 <TIMER_start+0x17e>
	{
		case TIMER_0:
		switch (prescalar){
 bd8:	40 34       	cpi	r20, 0x40	; 64
 bda:	51 05       	cpc	r21, r1
 bdc:	61 05       	cpc	r22, r1
 bde:	71 05       	cpc	r23, r1
 be0:	11 f1       	breq	.+68     	; 0xc26 <TIMER_start+0x5e>
 be2:	58 f4       	brcc	.+22     	; 0xbfa <TIMER_start+0x32>
 be4:	41 30       	cpi	r20, 0x01	; 1
 be6:	51 05       	cpc	r21, r1
 be8:	61 05       	cpc	r22, r1
 bea:	71 05       	cpc	r23, r1
 bec:	91 f0       	breq	.+36     	; 0xc12 <TIMER_start+0x4a>
 bee:	48 30       	cpi	r20, 0x08	; 8
 bf0:	51 05       	cpc	r21, r1
 bf2:	61 05       	cpc	r22, r1
 bf4:	71 05       	cpc	r23, r1
 bf6:	91 f0       	breq	.+36     	; 0xc1c <TIMER_start+0x54>
 bf8:	a8 c0       	rjmp	.+336    	; 0xd4a <TIMER_start+0x182>
 bfa:	41 15       	cp	r20, r1
 bfc:	81 e0       	ldi	r24, 0x01	; 1
 bfe:	58 07       	cpc	r21, r24
 c00:	61 05       	cpc	r22, r1
 c02:	71 05       	cpc	r23, r1
 c04:	c1 f0       	breq	.+48     	; 0xc36 <TIMER_start+0x6e>
 c06:	41 15       	cp	r20, r1
 c08:	54 40       	sbci	r21, 0x04	; 4
 c0a:	61 05       	cpc	r22, r1
 c0c:	71 05       	cpc	r23, r1
 c0e:	c1 f0       	breq	.+48     	; 0xc40 <TIMER_start+0x78>
 c10:	9c c0       	rjmp	.+312    	; 0xd4a <TIMER_start+0x182>
			case NO_PRESCALAR:   //start with no prescalar
			TCCR0 |= (1<<CS00);
 c12:	83 b7       	in	r24, 0x33	; 51
 c14:	81 60       	ori	r24, 0x01	; 1
 c16:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c18:	80 e0       	ldi	r24, 0x00	; 0
	{
		case TIMER_0:
		switch (prescalar){
			case NO_PRESCALAR:   //start with no prescalar
			TCCR0 |= (1<<CS00);
			break;
 c1a:	08 95       	ret
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR0 |= (1<<CS01);
 c1c:	83 b7       	in	r24, 0x33	; 51
 c1e:	82 60       	ori	r24, 0x02	; 2
 c20:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c22:	80 e0       	ldi	r24, 0x00	; 0
			case NO_PRESCALAR:   //start with no prescalar
			TCCR0 |= (1<<CS00);
			break;
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR0 |= (1<<CS01);
			break;
 c24:	08 95       	ret
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR0 |= (1<<CS00);
 c26:	83 b7       	in	r24, 0x33	; 51
 c28:	81 60       	ori	r24, 0x01	; 1
 c2a:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1<<CS01);
 c2c:	83 b7       	in	r24, 0x33	; 51
 c2e:	82 60       	ori	r24, 0x02	; 2
 c30:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c32:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= (1<<CS01);
			break;
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR0 |= (1<<CS00);
			TCCR0 |= (1<<CS01);
			break;
 c34:	08 95       	ret
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR0 |= (1<<CS02);
 c36:	83 b7       	in	r24, 0x33	; 51
 c38:	84 60       	ori	r24, 0x04	; 4
 c3a:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c3c:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= (1<<CS00);
			TCCR0 |= (1<<CS01);
			break;
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR0 |= (1<<CS02);
			break;
 c3e:	08 95       	ret
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR0 |= (1<<CS00);
 c40:	83 b7       	in	r24, 0x33	; 51
 c42:	81 60       	ori	r24, 0x01	; 1
 c44:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1<<CS02);
 c46:	83 b7       	in	r24, 0x33	; 51
 c48:	84 60       	ori	r24, 0x04	; 4
 c4a:	83 bf       	out	0x33, r24	; 51
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c4c:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= (1<<CS02);
			break;
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR0 |= (1<<CS00);
			TCCR0 |= (1<<CS02);
			break;
 c4e:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		case TIMER_1:
		switch (prescalar){
 c50:	40 34       	cpi	r20, 0x40	; 64
 c52:	51 05       	cpc	r21, r1
 c54:	61 05       	cpc	r22, r1
 c56:	71 05       	cpc	r23, r1
 c58:	11 f1       	breq	.+68     	; 0xc9e <TIMER_start+0xd6>
 c5a:	58 f4       	brcc	.+22     	; 0xc72 <TIMER_start+0xaa>
 c5c:	41 30       	cpi	r20, 0x01	; 1
 c5e:	51 05       	cpc	r21, r1
 c60:	61 05       	cpc	r22, r1
 c62:	71 05       	cpc	r23, r1
 c64:	91 f0       	breq	.+36     	; 0xc8a <TIMER_start+0xc2>
 c66:	48 30       	cpi	r20, 0x08	; 8
 c68:	51 05       	cpc	r21, r1
 c6a:	61 05       	cpc	r22, r1
 c6c:	71 05       	cpc	r23, r1
 c6e:	91 f0       	breq	.+36     	; 0xc94 <TIMER_start+0xcc>
 c70:	6e c0       	rjmp	.+220    	; 0xd4e <TIMER_start+0x186>
 c72:	41 15       	cp	r20, r1
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	58 07       	cpc	r21, r24
 c78:	61 05       	cpc	r22, r1
 c7a:	71 05       	cpc	r23, r1
 c7c:	c1 f0       	breq	.+48     	; 0xcae <TIMER_start+0xe6>
 c7e:	41 15       	cp	r20, r1
 c80:	54 40       	sbci	r21, 0x04	; 4
 c82:	61 05       	cpc	r22, r1
 c84:	71 05       	cpc	r23, r1
 c86:	c1 f0       	breq	.+48     	; 0xcb8 <TIMER_start+0xf0>
 c88:	62 c0       	rjmp	.+196    	; 0xd4e <TIMER_start+0x186>
			case NO_PRESCALAR:   //start with no prescalar
			TCCR1B |= (1<<CS10);
 c8a:	8e b5       	in	r24, 0x2e	; 46
 c8c:	81 60       	ori	r24, 0x01	; 1
 c8e:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c90:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case TIMER_1:
		switch (prescalar){
			case NO_PRESCALAR:   //start with no prescalar
			TCCR1B |= (1<<CS10);
			break;
 c92:	08 95       	ret
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR1B |= (1<<CS11);
 c94:	8e b5       	in	r24, 0x2e	; 46
 c96:	82 60       	ori	r24, 0x02	; 2
 c98:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 c9a:	80 e0       	ldi	r24, 0x00	; 0
			case NO_PRESCALAR:   //start with no prescalar
			TCCR1B |= (1<<CS10);
			break;
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR1B |= (1<<CS11);
			break;
 c9c:	08 95       	ret
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR1B |= (1<<CS10);
 c9e:	8e b5       	in	r24, 0x2e	; 46
 ca0:	81 60       	ori	r24, 0x01	; 1
 ca2:	8e bd       	out	0x2e, r24	; 46
			TCCR1B |= (1<<CS11);
 ca4:	8e b5       	in	r24, 0x2e	; 46
 ca6:	82 60       	ori	r24, 0x02	; 2
 ca8:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 caa:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1B |= (1<<CS11);
			break;
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR1B |= (1<<CS10);
			TCCR1B |= (1<<CS11);
			break;
 cac:	08 95       	ret
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR1B |= (1<<CS12);
 cae:	8e b5       	in	r24, 0x2e	; 46
 cb0:	84 60       	ori	r24, 0x04	; 4
 cb2:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 cb4:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1B |= (1<<CS10);
			TCCR1B |= (1<<CS11);
			break;
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR1B |= (1<<CS12);
			break;
 cb6:	08 95       	ret
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR1B |= (1<<CS10);
 cb8:	8e b5       	in	r24, 0x2e	; 46
 cba:	81 60       	ori	r24, 0x01	; 1
 cbc:	8e bd       	out	0x2e, r24	; 46
			TCCR1B |= (1<<CS12);
 cbe:	8e b5       	in	r24, 0x2e	; 46
 cc0:	84 60       	ori	r24, 0x04	; 4
 cc2:	8e bd       	out	0x2e, r24	; 46
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 cc4:	80 e0       	ldi	r24, 0x00	; 0
			TCCR1B |= (1<<CS12);
			break;
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR1B |= (1<<CS10);
			TCCR1B |= (1<<CS12);
			break;
 cc6:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		case TIMER_2:
		switch (prescalar){
 cc8:	40 34       	cpi	r20, 0x40	; 64
 cca:	51 05       	cpc	r21, r1
 ccc:	61 05       	cpc	r22, r1
 cce:	71 05       	cpc	r23, r1
 cd0:	11 f1       	breq	.+68     	; 0xd16 <TIMER_start+0x14e>
 cd2:	58 f4       	brcc	.+22     	; 0xcea <TIMER_start+0x122>
 cd4:	41 30       	cpi	r20, 0x01	; 1
 cd6:	51 05       	cpc	r21, r1
 cd8:	61 05       	cpc	r22, r1
 cda:	71 05       	cpc	r23, r1
 cdc:	91 f0       	breq	.+36     	; 0xd02 <TIMER_start+0x13a>
 cde:	48 30       	cpi	r20, 0x08	; 8
 ce0:	51 05       	cpc	r21, r1
 ce2:	61 05       	cpc	r22, r1
 ce4:	71 05       	cpc	r23, r1
 ce6:	91 f0       	breq	.+36     	; 0xd0c <TIMER_start+0x144>
 ce8:	34 c0       	rjmp	.+104    	; 0xd52 <TIMER_start+0x18a>
 cea:	41 15       	cp	r20, r1
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	58 07       	cpc	r21, r24
 cf0:	61 05       	cpc	r22, r1
 cf2:	71 05       	cpc	r23, r1
 cf4:	c1 f0       	breq	.+48     	; 0xd26 <TIMER_start+0x15e>
 cf6:	41 15       	cp	r20, r1
 cf8:	54 40       	sbci	r21, 0x04	; 4
 cfa:	61 05       	cpc	r22, r1
 cfc:	71 05       	cpc	r23, r1
 cfe:	c1 f0       	breq	.+48     	; 0xd30 <TIMER_start+0x168>
 d00:	28 c0       	rjmp	.+80     	; 0xd52 <TIMER_start+0x18a>
			case NO_PRESCALAR:   //start with no prescalar
			TCCR2 |= (1<<CS20);
 d02:	85 b5       	in	r24, 0x25	; 37
 d04:	81 60       	ori	r24, 0x01	; 1
 d06:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d08:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case TIMER_2:
		switch (prescalar){
			case NO_PRESCALAR:   //start with no prescalar
			TCCR2 |= (1<<CS20);
			break;
 d0a:	08 95       	ret
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR2 |= (1<<CS21);
 d0c:	85 b5       	in	r24, 0x25	; 37
 d0e:	82 60       	ori	r24, 0x02	; 2
 d10:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d12:	80 e0       	ldi	r24, 0x00	; 0
			case NO_PRESCALAR:   //start with no prescalar
			TCCR2 |= (1<<CS20);
			break;
			case PRESCALAR_8:	//start with prescalar clk/8
			TCCR2 |= (1<<CS21);
			break;
 d14:	08 95       	ret
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR2 |= (1<<CS20);
 d16:	85 b5       	in	r24, 0x25	; 37
 d18:	81 60       	ori	r24, 0x01	; 1
 d1a:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= (1<<CS21);
 d1c:	85 b5       	in	r24, 0x25	; 37
 d1e:	82 60       	ori	r24, 0x02	; 2
 d20:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d22:	80 e0       	ldi	r24, 0x00	; 0
			TCCR2 |= (1<<CS21);
			break;
			case PRESCALAR_64:	//start with prescalar clk/64
			TCCR2 |= (1<<CS20);
			TCCR2 |= (1<<CS21);
			break;
 d24:	08 95       	ret
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR2 |= (1<<CS22);
 d26:	85 b5       	in	r24, 0x25	; 37
 d28:	84 60       	ori	r24, 0x04	; 4
 d2a:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d2c:	80 e0       	ldi	r24, 0x00	; 0
			TCCR2 |= (1<<CS20);
			TCCR2 |= (1<<CS21);
			break;
			case PRESCALAR_256:	//start with prescalar clk/256
			TCCR2 |= (1<<CS22);
			break;
 d2e:	08 95       	ret
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR2 |= (1<<CS20);
 d30:	85 b5       	in	r24, 0x25	; 37
 d32:	81 60       	ori	r24, 0x01	; 1
 d34:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= (1<<CS21);
 d36:	85 b5       	in	r24, 0x25	; 37
 d38:	82 60       	ori	r24, 0x02	; 2
 d3a:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= (1<<CS22);
 d3c:	85 b5       	in	r24, 0x25	; 37
 d3e:	84 60       	ori	r24, 0x04	; 4
 d40:	85 bd       	out	0x25, r24	; 37
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d42:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR2 |= (1<<CS20);
			TCCR2 |= (1<<CS21);
			TCCR2 |= (1<<CS22);
			break;
 d44:	08 95       	ret
			default:
			return ERROR;
		}
		break;
		default:
		return ERROR;
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	08 95       	ret
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR0 |= (1<<CS00);
			TCCR0 |= (1<<CS02);
			break;
			default:
			return ERROR;
 d4a:	81 e0       	ldi	r24, 0x01	; 1
 d4c:	08 95       	ret
			case PRESCALAR_1024: //start with prescalar clk/1024
			TCCR1B |= (1<<CS10);
			TCCR1B |= (1<<CS12);
			break;
			default:
			return ERROR;
 d4e:	81 e0       	ldi	r24, 0x01	; 1
 d50:	08 95       	ret
			TCCR2 |= (1<<CS20);
			TCCR2 |= (1<<CS21);
			TCCR2 |= (1<<CS22);
			break;
			default:
			return ERROR;
 d52:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return ERROR;
	}
	return OK;
}
 d54:	08 95       	ret

00000d56 <TIMER_set_value>:

uint8_t TIMER_set_value( uint8_t timerNumber, uint8_t initValue) {
	switch (timerNumber){
 d56:	81 30       	cpi	r24, 0x01	; 1
 d58:	39 f0       	breq	.+14     	; 0xd68 <TIMER_set_value+0x12>
 d5a:	18 f0       	brcs	.+6      	; 0xd62 <TIMER_set_value+0xc>
 d5c:	82 30       	cpi	r24, 0x02	; 2
 d5e:	41 f0       	breq	.+16     	; 0xd70 <TIMER_set_value+0x1a>
 d60:	0a c0       	rjmp	.+20     	; 0xd76 <TIMER_set_value+0x20>
		case TIMER_0:
		TCNT0 = initValue;
 d62:	62 bf       	out	0x32, r22	; 50
		TCNT2 = initValue;
		break;
		default:
		return ERROR;
	}
	return OK;
 d64:	80 e0       	ldi	r24, 0x00	; 0

uint8_t TIMER_set_value( uint8_t timerNumber, uint8_t initValue) {
	switch (timerNumber){
		case TIMER_0:
		TCNT0 = initValue;
		break;
 d66:	08 95       	ret
		case TIMER_1:
		TCNT1H = 0x00;
 d68:	1d bc       	out	0x2d, r1	; 45
		TCNT1L = initValue;
 d6a:	6c bd       	out	0x2c, r22	; 44
		TCNT2 = initValue;
		break;
		default:
		return ERROR;
	}
	return OK;
 d6c:	80 e0       	ldi	r24, 0x00	; 0
		TCNT0 = initValue;
		break;
		case TIMER_1:
		TCNT1H = 0x00;
		TCNT1L = initValue;
		break;
 d6e:	08 95       	ret
		case TIMER_2:
		TCNT2 = initValue;
 d70:	64 bd       	out	0x24, r22	; 36
		break;
		default:
		return ERROR;
	}
	return OK;
 d72:	80 e0       	ldi	r24, 0x00	; 0
		TCNT1H = 0x00;
		TCNT1L = initValue;
		break;
		case TIMER_2:
		TCNT2 = initValue;
		break;
 d74:	08 95       	ret
		default:
		return ERROR;
 d76:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
}
 d78:	08 95       	ret

00000d7a <TIMER_delay>:


uint8_t TIMER_delay( uint8_t timerNumber, uint8_t overFlows){
	uint8_t overflowCounter = 0;
	switch (timerNumber){
 d7a:	81 30       	cpi	r24, 0x01	; 1
 d7c:	c9 f0       	breq	.+50     	; 0xdb0 <TIMER_delay+0x36>
 d7e:	58 f0       	brcs	.+22     	; 0xd96 <TIMER_delay+0x1c>
 d80:	82 30       	cpi	r24, 0x02	; 2
 d82:	19 f1       	breq	.+70     	; 0xdca <TIMER_delay+0x50>
 d84:	27 c0       	rjmp	.+78     	; 0xdd4 <TIMER_delay+0x5a>
		case TIMER_0:
		while (overflowCounter < overFlows)
		{
			while ((TIFR & (1<<TOV0)) == 0);			//delay
 d86:	08 b6       	in	r0, 0x38	; 56
 d88:	00 fe       	sbrs	r0, 0
 d8a:	fd cf       	rjmp	.-6      	; 0xd86 <TIMER_delay+0xc>
			TIFR |= (1<<TOV0);							//clear overflow flag
 d8c:	88 b7       	in	r24, 0x38	; 56
 d8e:	81 60       	ori	r24, 0x01	; 1
 d90:	88 bf       	out	0x38, r24	; 56
			overflowCounter ++;							//increment no of overflows
 d92:	9f 5f       	subi	r25, 0xFF	; 255
 d94:	01 c0       	rjmp	.+2      	; 0xd98 <TIMER_delay+0x1e>
}


uint8_t TIMER_delay( uint8_t timerNumber, uint8_t overFlows){
	uint8_t overflowCounter = 0;
	switch (timerNumber){
 d96:	90 e0       	ldi	r25, 0x00	; 0
		case TIMER_0:
		while (overflowCounter < overFlows)
 d98:	96 17       	cp	r25, r22
 d9a:	a8 f3       	brcs	.-22     	; 0xd86 <TIMER_delay+0xc>
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	08 95       	ret
		}
		break;
		case TIMER_1:
		while (overflowCounter < overFlows)
		{
			while ((TIFR & (1<<TOV1)) == 0);			//delay
 da0:	08 b6       	in	r0, 0x38	; 56
 da2:	02 fe       	sbrs	r0, 2
 da4:	fd cf       	rjmp	.-6      	; 0xda0 <TIMER_delay+0x26>
			TIFR |= (1<<TOV1);							//clear overflow flag
 da6:	88 b7       	in	r24, 0x38	; 56
 da8:	84 60       	ori	r24, 0x04	; 4
 daa:	88 bf       	out	0x38, r24	; 56
			overflowCounter ++;							//increment no of overflows
 dac:	9f 5f       	subi	r25, 0xFF	; 255
 dae:	01 c0       	rjmp	.+2      	; 0xdb2 <TIMER_delay+0x38>
}


uint8_t TIMER_delay( uint8_t timerNumber, uint8_t overFlows){
	uint8_t overflowCounter = 0;
	switch (timerNumber){
 db0:	90 e0       	ldi	r25, 0x00	; 0
			TIFR |= (1<<TOV0);							//clear overflow flag
			overflowCounter ++;							//increment no of overflows
		}
		break;
		case TIMER_1:
		while (overflowCounter < overFlows)
 db2:	96 17       	cp	r25, r22
 db4:	a8 f3       	brcs	.-22     	; 0xda0 <TIMER_delay+0x26>
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	08 95       	ret
		}
		break;
		case TIMER_2:
		while (overflowCounter < overFlows)
		{
			while ((TIFR & (1<<TOV2)) == 0);			//delay
 dba:	08 b6       	in	r0, 0x38	; 56
 dbc:	06 fe       	sbrs	r0, 6
 dbe:	fd cf       	rjmp	.-6      	; 0xdba <TIMER_delay+0x40>
			TIFR |= (1<<TOV2);							//clear overflow flag
 dc0:	88 b7       	in	r24, 0x38	; 56
 dc2:	80 64       	ori	r24, 0x40	; 64
 dc4:	88 bf       	out	0x38, r24	; 56
			overflowCounter ++;							//increment no of overflows
 dc6:	9f 5f       	subi	r25, 0xFF	; 255
 dc8:	01 c0       	rjmp	.+2      	; 0xdcc <TIMER_delay+0x52>
}


uint8_t TIMER_delay( uint8_t timerNumber, uint8_t overFlows){
	uint8_t overflowCounter = 0;
	switch (timerNumber){
 dca:	90 e0       	ldi	r25, 0x00	; 0
			TIFR |= (1<<TOV1);							//clear overflow flag
			overflowCounter ++;							//increment no of overflows
		}
		break;
		case TIMER_2:
		while (overflowCounter < overFlows)
 dcc:	96 17       	cp	r25, r22
 dce:	a8 f3       	brcs	.-22     	; 0xdba <TIMER_delay+0x40>
		}
		break;
		default:
		return ERROR;
	}
	return OK;
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	08 95       	ret
			TIFR |= (1<<TOV2);							//clear overflow flag
			overflowCounter ++;							//increment no of overflows
		}
		break;
		default:
		return ERROR;
 dd4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OK;
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
